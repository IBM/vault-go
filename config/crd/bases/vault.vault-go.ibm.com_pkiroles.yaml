
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: pkiroles.vault.vault-go.ibm.com
spec:
  group: vault.vault-go.ibm.com
  names:
    kind: PKIRole
    listKind: PKIRoleList
    plural: pkiroles
    singular: pkirole
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: PKIRole is the Schema for the pkiroles API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: PKIRoleSpec defines the desired state of PKIRole
          properties:
            config:
              description: PKIRoleBackendConfig configures the role definition. Note
                that the allowed_domains, allow_subdomains, allow_glob_domains, and
                allow_any_name attributes are additive; between them nearly and across
                multiple roles nearly any issuing policy can be accommodated. server_flag,
                client_flag, and code_signing_flag are additive as well. If a client
                requests a certificate that is not allowed by the CN policy in the
                role, the request is denied.
              properties:
                UseCSRCommonName:
                  description: 'UseCSRCommonName (bool: true) – When used with the
                    CSR signing endpoint, the common name in the CSR will be used
                    instead of taken from the JSON data. This does not include any
                    requested SANs in the CSR; use use_csr_sans for that.'
                  type: boolean
                UseCSRSANs:
                  description: 'UseCSRSANs (bool: true) – When used with the CSR signing
                    endpoint, the subject alternate names in the CSR will be used
                    instead of taken from the JSON data. This does not include the
                    common name in the CSR; use use_csr_common_name for that.'
                  type: boolean
                allowAnyName:
                  description: 'AllowAnyName (bool: false) – Specifies if clients
                    can request any CN. Useful in some circumstances, but make sure
                    you understand whether it is appropriate for your installation
                    before enabling it.'
                  type: boolean
                allowBareDomains:
                  description: 'AllowBareDomains (bool: false) – Specifies if clients
                    can request certificates matching the value of the actual domains
                    themselves; e.g. if a configured domain set with allowed_domains
                    is example.com, this allows clients to actually request a certificate
                    containing the name example.com as one of the DNS values on the
                    final certificate. In some scenarios, this can be considered a
                    security risk.'
                  type: boolean
                allowGlobDomains:
                  description: 'AllowGlobDomains (bool: false) - Allows names specified
                    in allowed_domains to contain glob patterns (e.g. ftp*.example.com).
                    Clients will be allowed to request certificates with names matching
                    the glob patterns.'
                  type: boolean
                allowIPSANs:
                  description: 'AllowIPSANs (bool: true) – Specifies if clients can
                    request IP Subject Alternative Names. No authorization checking
                    is performed except to verify that the given values are valid
                    IP addresses.'
                  type: boolean
                allowLocalhost:
                  description: 'AllowLocalhost (bool: true) – Specifies if clients
                    can request certificates for localhost as one of the requested
                    common names. This is useful for testing and to allow clients
                    on a single host to talk securely.'
                  type: boolean
                allowSubdomains:
                  description: 'AllowSubdomains (bool: false) – Specifies if clients
                    can request certificates with CNs that are subdomains of the CNs
                    allowed by the other role options. This includes wildcard subdomains.
                    For example, an allowed_domains value of example.com with this
                    option set to true will allow foo.example.com and bar.example.com
                    as well as *.example.com. This is redundant when using the allow_any_name
                    option.'
                  type: boolean
                allowedDomains:
                  description: 'AllowedDomains (list: []) – Specifies the domains
                    of the role. This is used with the allow_bare_domains and allow_subdomains
                    options.'
                  items:
                    type: string
                  type: array
                allowedOtherSANs:
                  description: 'AllowedOtherSANs (string: "") – Defines allowed custom
                    OID/UTF8-string SANs. This can be a comma-delimited list or a
                    JSON string slice, where each element has the same format as OpenSSL:
                    <oid>;<type>:<value>, but the only valid type is UTF8 or UTF-8.
                    The value part of an element may be a * to allow any value with
                    that OID. Alternatively, specifying a single * will allow any
                    other_sans input.'
                  type: string
                allowedURISANs:
                  description: 'AllowedURISANs (string: "") - Defines allowed URI
                    Subject Alternative Names. No authorization checking is performed
                    except to verify that the given values are valid URIs. This can
                    be a comma-delimited list or a JSON string slice. Values can contain
                    glob patterns (e.g. spiffe://hostname/*).'
                  items:
                    type: string
                  type: array
                basicConstraintesValidForNonCA:
                  description: 'BasicConstraintesValidForNonCA (bool: false) - Mark
                    Basic Constraints valid when issuing non-CA certificates.'
                  type: boolean
                clientFlag:
                  description: 'ClientFlag (bool: true) – Specifies if certificates
                    are flagged for client use.'
                  type: boolean
                codeSigningFlag:
                  description: 'CodeSigningFlag (bool: false) – Specifies if certificates
                    are flagged for code signing use.'
                  type: boolean
                commonName:
                  description: 'start Distinguished Name *** CommonName (string: <required>)
                    – Specifies the requested CN for the certificate. If the CN is
                    allowed by role policy, it will be issued.'
                  type: string
                country:
                  description: 'Country (string: "") – Specifies the C (Country) values
                    in the subject field of issued certificates. This is a comma-separated
                    string or JSON array.'
                  items:
                    type: string
                  type: array
                emailProtectionFlag:
                  description: 'yaml doenst understand annon structs DN (DN) is a
                    term that describes the identifying information in a certificate
                    and is part of the certificate itself. A certificate contains
                    DN information for both the owner or requestor of the certificate
                    (called the Subject DN) and the CA that issues the certificate
                    (called the Issuer DN). DN `json:"dn,omitempty,omitempty" yaml:"dn,omitempty,omitempty"
                    vault:"dn,omitempty"` email_protection_flag (bool: false) – Specifies
                    if certificates are flagged for email protection use.'
                  type: boolean
                enforceHostnames:
                  description: 'EnforceHostnames (bool: true) – Specifies if only
                    valid host names are allowed for CNs, DNS SANs, and the host part
                    of email addresses.'
                  type: boolean
                extKeyUsage:
                  description: 'ExtKeyUsage (list: []) – Specifies the allowed extended
                    key usage constraint on issued certificates. Valid values can
                    be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage -
                    simply drop the ExtKeyUsage part of the value. Values are not
                    case-sensitive. To specify no key usage constraints, set this
                    to an empty list.'
                  items:
                    type: string
                  type: array
                extKeyUsageOIDs:
                  description: 'ExtKeyUsageOIDs (string: "") - A comma-separated string
                    or list of extended key usage oids.'
                  items:
                    type: string
                  type: array
                generateLease:
                  description: 'GenerateLease (bool: false) – Specifies if certificates
                    issued/signed against this role will have Vault leases attached
                    to them. Certificates can be added to the CRL by vault revoke
                    <lease_id> when certificates are associated with leases. It can
                    also be done using the pki/revoke endpoint. However, when lease
                    generation is disabled, invoking pki/revoke would be the only
                    way to add the certificates to the CRL.'
                  type: boolean
                keyBits:
                  description: 'KeyBits (int: 2048) – Specifies the number of bits
                    to use for the generated keys. This will need to be changed for
                    ec keys, e.g., 224 or 521.'
                  type: integer
                keyType:
                  description: 'KeyType (string: "rsa") – Specifies the type of key
                    to generate for generated private keys and the type of key expected
                    for submitted CSRs. Currently, rsa and ec are supported, or when
                    signing CSRs any can be specified to allow keys of either type
                    and with any bit size (subject to > 1024 bits for RSA keys).'
                  type: string
                keyUsage:
                  description: 'KeyUsage (list: ["DigitalSignature", "KeyAgreement",
                    "KeyEncipherment"]) – Specifies the allowed key usage constraint
                    on issued certificates. Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage
                    - simply drop the KeyUsage part of the value. Values are not case-sensitive.
                    To specify no key usage constraints, set this to an empty list.'
                  items:
                    type: string
                  type: array
                locality:
                  description: 'Locality (string: "") – Specifies the L (Locality)
                    values in the subject field of issued certificates. This is a
                    comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                maxTTL:
                  description: 'MaxTTL (int: 0) – Specifies the maximum Time To Live
                    provided as int number of seconds. Hour is the largest suffix.
                    If not set, defaults to the system maximum lease TTL.'
                  format: int64
                  type: integer
                noStore:
                  description: 'NoStore (bool: false) – If set, certificates issued/signed
                    against this role will not be stored in the storage backend. This
                    can improve performance when issuing large numbers of certificates.
                    However, certificates issued in this way cannot be enumerated
                    or revoked, so this option is recommended only for certificates
                    that are non-sensitive, or extremely short-lived. This option
                    implies a value of false for generate_lease.'
                  type: boolean
                notBeforeDuration:
                  description: 'NotBeforeDurationn (int: 30) – Specifies the seconds
                    by which to backdate the NotBefore property.'
                  type: integer
                organization:
                  description: 'organization (string: "") – Specifies the O (Organization)
                    values in the subject field of issued certificates. This is a
                    comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                ou:
                  description: 'OU (string: "") – Specifies the OU (OrganizationalUnit)
                    values in the subject field of issued certificates. This is a
                    comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                policyIdentifiers:
                  description: 'PolicyIdentifiers (list: []) – A comma-separated string
                    or list of policy OIDs.'
                  items:
                    type: string
                  type: array
                postalCode:
                  description: 'postalCode (string: "") – Specifies the Postal Code
                    values in the subject field of issued certificates. This is a
                    comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                province:
                  description: 'Province (string: "") – Specifies the ST (Province)
                    values in the subject field of issued certificates. This is a
                    comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                requireCN:
                  description: 'RequireCN (bool: true) - If set to false, makes the
                    common_name field optional while generating a certificate.'
                  type: boolean
                serialNumber:
                  description: 'SerialNumber (string: "") – Specifies the Serial Number,
                    if any. Otherwise Vault will generate a random serial for you.
                    If you want more than one, specify alternative names in the alt_names
                    map using OID 2.5.4.5.'
                  type: string
                serverFlag:
                  description: 'ServerFlag (bool: true) – Specifies if certificates
                    are flagged for server use.'
                  type: boolean
                streetAddress:
                  description: 'StreetAddress (string: "") – Specifies the Street
                    Address values in the subject field of issued certificates. This
                    is a comma-separated string or JSON array.'
                  items:
                    type: string
                  type: array
                ttl:
                  description: 'TTL ttl (int64: 0) – Specifies the Time To Live value
                    provided as seconds in int. If not set, uses the system default
                    value or the value of max_ttl, whichever is shorter.'
                  format: int64
                  type: integer
              required:
              - UseCSRCommonName
              - UseCSRSANs
              - allowIPSANs
              - allowLocalhost
              - clientFlag
              - enforceHostnames
              - keyUsage
              - requireCN
              - serverFlag
              type: object
            issuerPath:
              description: 'Name (string: <required>) – Specifies the name of the
                role to create. This is part of the request URL.'
              type: string
            roleName:
              type: string
            vaultNamespace:
              type: string
          required:
          - config
          - issuerPath
          - roleName
          - vaultNamespace
          type: object
        status:
          description: PKIRoleStatus defines the observed state of PKIRole
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
